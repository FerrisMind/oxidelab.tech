const fs = require("fs");
const path = require("path");

console.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ö–æ—Å—Ç–∏–Ω–≥–æ–º...\n");

const outDir = path.join(__dirname, "out");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
const requiredFiles = ["index.html", "favicon.ico", ".htaccess"];

console.log("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:");
requiredFiles.forEach((file) => {
  const filePath = path.join(outDir, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù!`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
const requiredDirs = ["_next", "static"];

console.log("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫:");
requiredDirs.forEach((dir) => {
  const dirPath = path.join(outDir, dir);
  if (fs.existsSync(dirPath)) {
    console.log(`‚úÖ ${dir}/ - –Ω–∞–π–¥–µ–Ω–∞`);
  } else {
    console.log(`‚ùå ${dir}/ - –ù–ï –ù–ê–ô–î–ï–ù–ê!`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ index.html
console.log("\nüìÑ –ê–Ω–∞–ª–∏–∑ index.html:");
const indexPath = path.join(outDir, "index.html");
if (fs.existsSync(indexPath)) {
  const content = fs.readFileSync(indexPath, "utf8");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—É—Ç–µ–π
  const absolutePaths = content.match(/href="\/[^"]*"/g) || [];
  const absoluteSrcs = content.match(/src="\/[^"]*"/g) || [];

  if (absolutePaths.length > 0) {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${absolutePaths.length} –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –≤ href:`);
    absolutePaths.slice(0, 3).forEach((path) => console.log(`   ${path}`));
  }

  if (absoluteSrcs.length > 0) {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${absoluteSrcs.length} –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –≤ src:`);
    absoluteSrcs.slice(0, 3).forEach((path) => console.log(`   ${path}`));
  }

  if (absolutePaths.length === 0 && absoluteSrcs.length === 0) {
    console.log("‚úÖ –í—Å–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DOCTYPE
  if (content.includes("<!DOCTYPE html>")) {
    console.log("‚úÖ DOCTYPE –Ω–∞–π–¥–µ–Ω");
  } else {
    console.log("‚ùå DOCTYPE –ù–ï –ù–ê–ô–î–ï–ù!");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ title
  if (content.includes("<title>")) {
    console.log("‚úÖ Title –Ω–∞–π–¥–µ–Ω");
  } else {
    console.log("‚ùå Title –ù–ï –ù–ê–ô–î–ï–ù!");
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
console.log("\nüìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥:");
function listFiles(dir, prefix = "") {
  const items = fs.readdirSync(dir);
  items.forEach((item) => {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);

    if (stat.isDirectory()) {
      console.log(`${prefix}üìÅ ${item}/`);
      listFiles(itemPath, prefix + "  ");
    } else {
      console.log(`${prefix}üìÑ ${item}`);
    }
  });
}

listFiles(outDir);

console.log("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í–°–ï —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥");
console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ index.html –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –¥–æ–º–µ–Ω–∞");
console.log("3. –û—Ç–∫—Ä–æ–π—Ç–µ test.html –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ö–æ—Å—Ç–∏–Ω–≥–∞");
console.log("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ");
console.log("5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .htaccess —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
